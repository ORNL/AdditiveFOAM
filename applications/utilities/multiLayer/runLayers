#!/bin/bash
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     | Website:  https://openfoam.org
#   \\  /    A nd           | Copyright (C) 2011-2022 OpenFOAM Foundation
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     runLayers
#
# Description
#     Run an additiveFoam simulation for sequential layers.
#     Uses extrudeMesh to create layers and mapFields to initialize layers
#
#
# Usage:
#     PATH/TO/SCRIPT -nLayers # -layerThickness # -nCellsPerLayer #
#------------------------------------------------------------------------------

usage() {
    cat<<USAGE
Usage: ${0##*/} [OPTION] <application> ...
options:
  -nLayers          number of layers
  -layerThickness   thickness of each layer (deposition)
  -nCellsPerLayer   number of desired cells in each deposited layer
  -help             print the usage
* Run an additiveFoam simulation for sequential layers.
* Currently, only a single repeating scan pattern is supported.
USAGE
}

function args_check {
	if [ $# -lt 3 ]; then
	    usage
	    exit 1
	fi
}

# Parse options
while [ "$#" -gt 0 ]
do
   case "$1" in
   -h | -help)
      usage && exit 0
      ;;
   -nLayers)
      nLayers="$2"
      shift 2
      ;;
   -layerThickness)
      layerThickness="$2"
      shift 2
      ;;
   -nCellsPerLayer)
      nCellsPerLayer="$2"
      shift 2
      ;;
   --)
      shift
      break
      ;;
   -*)
      error "invalid option '$1'"
      ;;
   *)
      break
      ;;
   esac
done

args_check $nLayers $layerThickness $nCellsPerLayer

# create case directories
baseDir=${PWD}
caseList=()
for (( layer=0; layer<$nLayers; layer++ ))
do
    case="$baseDir/layer$layer"
    caseList+=($case)
    if [ -d $case ]; then rm -rf $case; fi
    mkdir $case

    cp -r "$baseDir/0" $case
    cp -r "$baseDir/constant" $case
    cp -r "$baseDir/system" $case
done

# extrude mesh in each directory
for (( layer=0; layer<$nLayers; layer++ ))
do
    case=${caseList[$layer]}
    previous=${caseList[$((layer-1))]}

    if [ $layer -gt 0 ]
    then   
        nLayers0="$(foamDictionary -entry nLayers -value $previous/system/extrudeMeshDict)"
        thickness0="$(foamDictionary -entry linearDirectionCoeffs/thickness -value $previous/system/extrudeMeshDict)"
        thickness=`awk "BEGIN {print $thickness0 + $layerThickness; exit}"`

        foamDictionary -entry nLayers -set "$(($nLayers0+$nCellsPerLayer))" $case/system/extrudeMeshDict
        foamDictionary -entry linearDirectionCoeffs/thickness -set "$thickness" $case/system/extrudeMeshDict

        extrudeMesh -case $case > /dev/null 2>&1
    fi
done

# update simulation times and run layers sequentially
layerTime="$(cd ${caseList[0]} && foamDictionary -entry endTime -value system/controlDict)"

for (( layer=0; layer<$nLayers; layer++ ))
do
    case="${caseList[$layer]}"
    previous="${caseList[$((layer-1))]}"
    cd $case

    if [ $layer -gt 0 ]
    then
        previous=${caseList[$((layer-1))]}
        time="$(foamDictionary -entry endTime -value $previous/system/controlDict)"

        # update start and end time of simulation
        mv 0 "$time"
        endTime=`awk "BEGIN {print $time + $layerTime; exit}"`
        foamDictionary -entry startTime -set $time system/controlDict
        foamDictionary -entry endTime -set $endTime system/controlDict

        # update wait time for scan path (assumes repeating scan)
        path=(`sed '2q;d' constant/scanPath`)
        path[5]=$time
        path=`echo $(echo ${path[@]}) | tr ' ' '\t\t'`
        sed -i "2s/.*/$path/" "$case/constant/scanPath"

        # map previous layer fields to new layer
        mapFields -case $case -sourceTime "$time" -mapMethod mapNearest $previous
    fi

    thickness="$(foamDictionary -entry linearDirectionCoeffs/thickness -value system/extrudeMeshDict)"
    
    # set powder height to the layer thickness 
    foamDictionary -entry regions -set \
    "(
        boxToCell
        {
            box (-1 -1 -$layerThickness) (1 1 1);
            fieldValues
            (
                volScalarFieldValue alpha.powder 1
            );
        }
    )" system/setFieldsDict
    
    nProcs="$(foamDictionary -entry numberOfSubdomains -value system/decomposeParDict)"

    transformPoints "translate=(0 0 -$thickness)"    
    setFields
    decomposePar
    mpirun -np $nProcs additiveFoam -parallel
    reconstructPar -latestTime
    transformPoints "translate=(0 0 $thickness)"
done

#------------------------------------------------------------------------------
